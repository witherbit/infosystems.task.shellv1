using infosystems.task.shellv1.Forms.Abstract;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace infosystems.task.shellv1.Forms.Tests
{
    public class ASTest : ITest
    {
        public IEnumerable<TestElement> TestElements { get; }

        public ASTest()
        {
            TestElements = new List<TestElement>
            {
                new TestElement("Какая группа соответствует вашей ИС?")
                .Insert("Первая группа - включает многопользовательские АС, в которых одновременно обрабатывается и (или) хранится информация разных уровней конфиденциальности. Не все пользователи имеют право доступа ко всей информации АС")
                .Insert("Вторая группа - включает АС, в которых пользователи имеют одинаковые права доступа (полномочия) ко всей информации АС, обрабатываемой и (или) хранимой на носителях различного уровня конфиденциальности")
                .Insert("Третья группа - включает АС, в которых работает один пользователь, допущенный ко всей информации АС, размещенной на носителях одного уровня конфиденциальности"),
                new TestElement("Соблюдаетлся ли требование по" +
                "идентификации, проверки подлинности и контролю доступа субъектов в систему?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "идентификации, проверки подлинности и контролю доступа субъектов к терминалам, ЭВМ, узлам сети ЭВМ, ка-налам связи, внешним устройствам ЭВМ?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "идентификации, проверки подлинности и контролю доступа субъектов к программам?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "идентификации, проверки подлинности и контролю доступа субъектов к дискам, каталогам, файлам, записям, полям записей?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "Управлению потоками информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету входа (выхода) субъектов доступа в (из) систему(ы) (узел сети)?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету выдачи печатных (графических) выходных документов?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету запуска (завершения) программ и процессов (заданий, задач)?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету доступа программ субъектов доступа к защищаемым файлам, включая их создание и удаление, передачу по линиям и каналам связи?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету доступа программ субъектов доступа к терминалам, ЭВМ, узлам сети ЭВМ, каналам связи, внешним устройствам ЭВМ, программам, дискам, каталогам, файлам, записям, полям записей?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету изменения полномочий субъектов доступа?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "регистрации и учету создаваемых защищаемых объектов доступа?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "учету носителей информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "очистке (обнулению, обезличиванию) освобождаемых областей оперативной памяти ЭВМ и внешних накопителей?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "сигнализации попыток нарушения защиты?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "шифрованию конфиденциальной информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "шифрованию информации, принадлежащей различным субъектам доступа (группам субъектов) на разных ключах?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "использованию сертифицированных криптографических средств защиты информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "обеспечению целостности программных средств и обрабатываемой информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "физической охране средств вычислительной техники и носителей информации?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "наличию администратора или службы защиты информации в АС?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "периодическому тестированию СЗИ НСД?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "наличию средств восстановления СЗИ НСД?")
                .Insert("Да")
                .Insert("Нет"),
                new TestElement("Соблюдаетлся ли требование по" +
                "использованию сертифицированных СЗИ НСД?")
                .Insert("Да")
                .Insert("Нет"),
            };
        }

        public string GetResult()
        {
            var output = string.Empty;
            var arr = TestElements.ToArray();

            var group = arr[0].SelectedAnswer + 1;
            if(group == 1)
                output = GetResultBy1(arr);
            else if (group == 2)
                output = GetResultBy2(arr);
            else
                output = GetResultBy3(arr);
            output = $"Результаты тестирования АС опросным методом:\r\n{output}";
            return output;
        }

        private string GetResultBy1(TestElement[] arr, bool from = false)
        {
            var a = new List<int>();
            for(int i = 1; i <= 24; i++)
            {
                a.Add(arr[i].SelectedAnswer.Invert());
            }
            for(int c = 0; c < 5; c++)
            {
                var arrTable = new List<int>();
                for(int r = 0; r < 24; r++)
                {
                    arrTable.Add(FirstTable[r, c]);
                }
                if (CompareValues(arrTable.ToArray(), a.ToArray()))
                {
                    switch (c)
                    {
                        case 0:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для первой группы: 1А";
                        case 1:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для первой группы: 1Б";
                        case 2:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для первой группы: 1В";
                        case 3:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для первой группы: 1Г";
                        case 4:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для первой группы: 1Д";
                    }
                }
            }
            if(!from)
                return $"Соблюденные требования не соответствуют ни одному классу защищенности в первой группе.\r\nРезультат проверки для второй группы: {GetResultBy2(arr, true)}\r\nРезультат проверки для третьей группы: {GetResultBy3(arr, true)}";
            else
                return $"Соблюденные требования не соответствуют ни одному классу защищенности в первой группе.";
        }
        private string GetResultBy2(TestElement[] arr, bool from = false)
        {
            var a = new List<int>();
            for (int i = 1; i <= 24; i++)
            {
                a.Add(arr[i].SelectedAnswer.Invert());
            }
            for (int c = 0; c < 2; c++)
            {
                var arrTable = new List<int>();
                for (int r = 0; r < 24; r++)
                {
                    arrTable.Add(SecondTable[r, c]);
                }
                if (CompareValues(arrTable.ToArray(), a.ToArray()))
                {
                    switch (c)
                    {
                        case 0:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для второй группы: 2А";
                        case 1:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для второй группы: 2Б";
                    }
                }
            }
            if (!from)
                return $"Соблюденные требования не соответствуют ни одному классу защищенности во второй группе.\r\nРезультат проверки для первой группы: {GetResultBy1(arr, true)}\r\nРезультат проверки для третьей группы: {GetResultBy3(arr, true)}";
            else
                return $"Соблюденные требования не соответствуют ни одному классу защищенности во второй группе.";
        }
        private string GetResultBy3(TestElement[] arr, bool from = false)
        {
            var a = new List<int>();
            for (int i = 1; i <= 24; i++)
            {
                if (i == 4 + 1)
                    continue;
                a.Add(arr[i].SelectedAnswer.Invert());
            }
            for (int c = 0; c < 2; c++)
            {
                var arrTable = new List<int>();
                for (int r = 0; r < 24; r++)
                {
                    if (r == 4)
                        continue;
                    arrTable.Add(ThirdTable[r, c]);
                }
                if (CompareValues(arrTable.ToArray(), a.ToArray()))
                {
                    switch (c)
                    {
                        case 0:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для третьей группы: 3А";
                        case 1:
                            return $"В результате тестирования опросным методом, был выявлен предполагаемый уровень защищенности АС для третьей группы: 3Б";
                    }
                }
            }
            if (!from)
                return $"Соблюденные требования не соответствуют ни одному классу защищенности в третьей группе.\r\nРезультат проверки для первой группы: {GetResultBy1(arr, true)}\r\nРезультат проверки для второй группы: {GetResultBy2(arr, true)}";
            else
                return $"Соблюденные требования не соответствуют ни одному классу защищенности в третьей группе.";
        }

        private bool CompareValues(int[] tableValues, int[] currentValues)
        {
            for(int i = 0; i < tableValues.Length; i++)
            {
                if (tableValues[i] != currentValues[i])
                    return false;
            }
            return true;
        }

        private readonly int[,] FirstTable = new int[,]
        {
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 1, 1 },
            { 1, 1, 1, 0, 0 },
        };
        private readonly int[,] SecondTable = new int[,]
        {
            { 1, 1 },
            { 1, 0 },
            { 1, 0 },
            { 1, 0 },
            { 1, 0 },
            { 1, 1 },
            { 1, 0 },
            { 1, 0 },
            { 1, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 },
            { 1, 1 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 },
            { 1, 1 },
            { 1, 1 },
            { 1, 0 },
            { 1, 1 },
            { 1, 1 },
            { 1, 0 },
        };
        private readonly int[,] ThirdTable = new int[,]
        {
            { 1, 1 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0 | 1, 0 | 1 },
            { 1, 1 },
            { 1, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 1, 1 },
            { 1, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 0, 0 },
            { 1, 1 },
            { 1, 1 },
            { 0, 0 },
            { 1, 1 },
            { 1, 1 },
            { 1, 0 },
        };
    }

    public static class IntExtensions
    {
        internal static int Invert(this int i)
        {
            if (i == 0)
                return 1;
            else
                return 0;
        }
    }
}
